// Code generated by counterfeiter. DO NOT EDIT.
package tarpathfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-agent/agent/tarpath"
)

type FakeDetector struct {
	DetectStub        func(string, string) (bool, error)
	detectMutex       sync.RWMutex
	detectArgsForCall []struct {
		arg1 string
		arg2 string
	}
	detectReturns struct {
		result1 bool
		result2 error
	}
	detectReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDetector) Detect(arg1 string, arg2 string) (bool, error) {
	fake.detectMutex.Lock()
	ret, specificReturn := fake.detectReturnsOnCall[len(fake.detectArgsForCall)]
	fake.detectArgsForCall = append(fake.detectArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.DetectStub
	fakeReturns := fake.detectReturns
	fake.recordInvocation("Detect", []interface{}{arg1, arg2})
	fake.detectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDetector) DetectCallCount() int {
	fake.detectMutex.RLock()
	defer fake.detectMutex.RUnlock()
	return len(fake.detectArgsForCall)
}

func (fake *FakeDetector) DetectCalls(stub func(string, string) (bool, error)) {
	fake.detectMutex.Lock()
	defer fake.detectMutex.Unlock()
	fake.DetectStub = stub
}

func (fake *FakeDetector) DetectArgsForCall(i int) (string, string) {
	fake.detectMutex.RLock()
	defer fake.detectMutex.RUnlock()
	argsForCall := fake.detectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDetector) DetectReturns(result1 bool, result2 error) {
	fake.detectMutex.Lock()
	defer fake.detectMutex.Unlock()
	fake.DetectStub = nil
	fake.detectReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeDetector) DetectReturnsOnCall(i int, result1 bool, result2 error) {
	fake.detectMutex.Lock()
	defer fake.detectMutex.Unlock()
	fake.DetectStub = nil
	if fake.detectReturnsOnCall == nil {
		fake.detectReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.detectReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeDetector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.detectMutex.RLock()
	defer fake.detectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDetector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tarpath.Detector = new(FakeDetector)
