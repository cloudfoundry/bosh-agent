// Code generated by counterfeiter. DO NOT EDIT.
package certfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-agent/platform/cert"
)

type FakeManager struct {
	UpdateCertificatesStub        func(string) error
	updateCertificatesMutex       sync.RWMutex
	updateCertificatesArgsForCall []struct {
		arg1 string
	}
	updateCertificatesReturns struct {
		result1 error
	}
	updateCertificatesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) UpdateCertificates(arg1 string) error {
	fake.updateCertificatesMutex.Lock()
	ret, specificReturn := fake.updateCertificatesReturnsOnCall[len(fake.updateCertificatesArgsForCall)]
	fake.updateCertificatesArgsForCall = append(fake.updateCertificatesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.UpdateCertificatesStub
	fakeReturns := fake.updateCertificatesReturns
	fake.recordInvocation("UpdateCertificates", []interface{}{arg1})
	fake.updateCertificatesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) UpdateCertificatesCallCount() int {
	fake.updateCertificatesMutex.RLock()
	defer fake.updateCertificatesMutex.RUnlock()
	return len(fake.updateCertificatesArgsForCall)
}

func (fake *FakeManager) UpdateCertificatesCalls(stub func(string) error) {
	fake.updateCertificatesMutex.Lock()
	defer fake.updateCertificatesMutex.Unlock()
	fake.UpdateCertificatesStub = stub
}

func (fake *FakeManager) UpdateCertificatesArgsForCall(i int) string {
	fake.updateCertificatesMutex.RLock()
	defer fake.updateCertificatesMutex.RUnlock()
	argsForCall := fake.updateCertificatesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) UpdateCertificatesReturns(result1 error) {
	fake.updateCertificatesMutex.Lock()
	defer fake.updateCertificatesMutex.Unlock()
	fake.UpdateCertificatesStub = nil
	fake.updateCertificatesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) UpdateCertificatesReturnsOnCall(i int, result1 error) {
	fake.updateCertificatesMutex.Lock()
	defer fake.updateCertificatesMutex.Unlock()
	fake.UpdateCertificatesStub = nil
	if fake.updateCertificatesReturnsOnCall == nil {
		fake.updateCertificatesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateCertificatesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateCertificatesMutex.RLock()
	defer fake.updateCertificatesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cert.Manager = new(FakeManager)
