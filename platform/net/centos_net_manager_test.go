package net_test

import (
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"

	boshlog "github.com/cloudfoundry/bosh-agent/logger"
	. "github.com/cloudfoundry/bosh-agent/platform/net"
	fakearp "github.com/cloudfoundry/bosh-agent/platform/net/arp/fakes"
	fakenet "github.com/cloudfoundry/bosh-agent/platform/net/fakes"
	boship "github.com/cloudfoundry/bosh-agent/platform/net/ip"
	fakeip "github.com/cloudfoundry/bosh-agent/platform/net/ip/fakes"
	boshsettings "github.com/cloudfoundry/bosh-agent/settings"
	fakesys "github.com/cloudfoundry/bosh-agent/system/fakes"
)

var _ = Describe("centosNetManager", func() {
	var (
		fs                     *fakesys.FakeFileSystem
		cmdRunner              *fakesys.FakeCmdRunner
		defaultNetworkResolver *fakenet.FakeDefaultNetworkResolver
		ipResolver             *fakeip.FakeResolver
		addressBroadcaster     *fakearp.FakeAddressBroadcaster
		netManager             Manager
	)

	BeforeEach(func() {
		fs = fakesys.NewFakeFileSystem()
		cmdRunner = fakesys.NewFakeCmdRunner()
		defaultNetworkResolver = &fakenet.FakeDefaultNetworkResolver{}
		ipResolver = &fakeip.FakeResolver{}
		addressBroadcaster = &fakearp.FakeAddressBroadcaster{}
		logger := boshlog.NewLogger(boshlog.LevelNone)
		netManager = NewCentosNetManager(
			fs,
			cmdRunner,
			defaultNetworkResolver,
			ipResolver,
			addressBroadcaster,
			logger,
		)
	})

	Describe("SetupDhcp", func() {
		const (
			dhcpConfPath       = "/etc/dhcp/dhclient.conf"
			expectedDHCPConfig = `# Generated by bosh-agent

option rfc3442-classless-static-routes code 121 = array of unsigned integer 8;

send host-name "<hostname>";

request subnet-mask, broadcast-address, time-offset, routers,
	domain-name, domain-name-servers, domain-search, host-name,
	netbios-name-servers, netbios-scope, interface-mtu,
	rfc3442-classless-static-routes, ntp-servers;

prepend domain-name-servers xx.xx.xx.xx, yy.yy.yy.yy, zz.zz.zz.zz;
`
		)

		var (
			networks boshsettings.Networks
		)

		BeforeEach(func() {
			networks = boshsettings.Networks{
				"bosh": boshsettings.Network{
					Default: []string{"dns"},
					DNS:     []string{"xx.xx.xx.xx", "yy.yy.yy.yy", "zz.zz.zz.zz"},
				},
				"vip": boshsettings.Network{
					Default: []string{},
					DNS:     []string{"aa.aa.aa.aa"},
				},
			}
		})

		ItBroadcastsMACAddresses := func() {
			It("starts broadcasting the MAC addresses", func() {
				errCh := make(chan error)

				err := netManager.SetupDhcp(networks, errCh)
				Expect(err).ToNot(HaveOccurred())

				<-errCh // wait for all arpings

				Expect(addressBroadcaster.BroadcastMACAddressesAddresses).To(Equal(
					[]boship.InterfaceAddress{
						// Resolve IP address because IP may not be known
						boship.NewResolvingInterfaceAddress("eth0", ipResolver),
					},
				))
			})
		}

		ItUpdatesDhcpConfig := func() {
			It("writes dhcp configuration", func() {
				err := netManager.SetupDhcp(networks, nil)
				Expect(err).ToNot(HaveOccurred())

				dhcpConfig := fs.GetFileTestStat(dhcpConfPath)
				Expect(dhcpConfig).ToNot(BeNil())
				Expect(dhcpConfig.StringContents()).To(Equal(expectedDHCPConfig))
			})

			It("writes out DNS servers in order that was provided by the network because *single* DHCP prepend command is used", func() {
				err := netManager.SetupDhcp(networks, nil)
				Expect(err).ToNot(HaveOccurred())

				dhcpConfig := fs.GetFileTestStat(dhcpConfPath)
				Expect(dhcpConfig).ToNot(BeNil())
				Expect(dhcpConfig.StringContents()).To(ContainSubstring(`
prepend domain-name-servers xx.xx.xx.xx, yy.yy.yy.yy, zz.zz.zz.zz;
`))
			})

			It("does not prepend any DNS servers if network does not provide them", func() {
				net := networks["bosh"]
				net.DNS = []string{}
				networks["bosh"] = net

				err := netManager.SetupDhcp(networks, nil)
				Expect(err).ToNot(HaveOccurred())

				dhcpConfig := fs.GetFileTestStat(dhcpConfPath)
				Expect(dhcpConfig).ToNot(BeNil())
				Expect(dhcpConfig.StringContents()).ToNot(ContainSubstring(`prepend domain-name-servers`))
			})
		}

		ItRestartsDhcp := func() {
			It("restarts network", func() {
				err := netManager.SetupDhcp(networks, nil)
				Expect(err).ToNot(HaveOccurred())

				Expect(len(cmdRunner.RunCommands)).To(Equal(1))
				Expect(cmdRunner.RunCommands[0]).To(Equal([]string{"service", "network", "restart"}))
			})
		}

		Context("when dhcp was not previously configured", func() {
			ItUpdatesDhcpConfig()
			ItRestartsDhcp()
			ItBroadcastsMACAddresses()
		})

		Context("when dhcp was previously configured with different configuration", func() {
			BeforeEach(func() {
				fs.WriteFileString(dhcpConfPath, "fake-other-configuration")
			})

			ItUpdatesDhcpConfig()
			ItRestartsDhcp()
			ItBroadcastsMACAddresses()
		})

		Context("when dhcp was previously configured with same configuration", func() {
			BeforeEach(func() {
				fs.WriteFileString(dhcpConfPath, expectedDHCPConfig)
			})

			It("keeps dhcp configuration", func() {
				err := netManager.SetupDhcp(networks, nil)
				Expect(err).ToNot(HaveOccurred())

				dhcpConfig := fs.GetFileTestStat(dhcpConfPath)
				Expect(dhcpConfig).ToNot(BeNil())
				Expect(dhcpConfig.StringContents()).To(Equal(expectedDHCPConfig))
			})

			It("does not restart network", func() {
				err := netManager.SetupDhcp(networks, nil)
				Expect(err).ToNot(HaveOccurred())

				Expect(len(cmdRunner.RunCommands)).To(Equal(0))
			})

			ItBroadcastsMACAddresses()
		})
	})

	Describe("SetupManualNetworking", func() {
		var errCh chan error

		BeforeEach(func() {
			errCh = make(chan error)
		})

		BeforeEach(func() {
			fs.WriteFileString("/sys/class/net/eth0/address", "22:00:0a:1f:ac:2a\n")
			fs.SetGlob("/sys/class/net/*", []string{"/sys/class/net/eth0"})
		})

		networks := boshsettings.Networks{
			"bosh": boshsettings.Network{
				Default: []string{"dns", "gateway"},
				IP:      "192.168.195.6",
				Netmask: "255.255.255.0",
				Gateway: "192.168.195.1",
				Mac:     "22:00:0a:1f:ac:2a",
				DNS:     []string{"10.80.130.2", "10.80.130.1"},
			},
		}

		It("sets up centos expected ifconfig", func() {
			err := netManager.SetupManualNetworking(networks, nil)
			Expect(err).ToNot(HaveOccurred())

			networkConfig := fs.GetFileTestStat("/etc/sysconfig/network-scripts/ifcfg-eth0")
			Expect(networkConfig).ToNot(BeNil())

			expectedIfcfg := `DEVICE=eth0
BOOTPROTO=static
IPADDR=192.168.195.6
NETMASK=255.255.255.0
BROADCAST=192.168.195.255
GATEWAY=192.168.195.1
ONBOOT=yes`
			Expect(networkConfig.StringContents()).To(Equal(expectedIfcfg))
		})

		It("sets up /etc/resolv.conf", func() {
			err := netManager.SetupManualNetworking(networks, nil)
			Expect(err).ToNot(HaveOccurred())

			resolvConf := fs.GetFileTestStat("/etc/resolv.conf")
			Expect(resolvConf).ToNot(BeNil())
			Expect(resolvConf.StringContents()).To(Equal(`# Generated by bosh-agent
nameserver 10.80.130.2
nameserver 10.80.130.1
`))
		})

		It("writes out DNS servers in order that was provided by the network", func() {
			err := netManager.SetupManualNetworking(networks, nil)
			Expect(err).ToNot(HaveOccurred())

			resolvConf := fs.GetFileTestStat("/etc/resolv.conf")
			Expect(resolvConf).ToNot(BeNil())
			Expect(resolvConf.StringContents()).To(ContainSubstring(`
nameserver 10.80.130.2
nameserver 10.80.130.1
`))
		})

		It("restarts networking", func() {
			err := netManager.SetupManualNetworking(networks, errCh)
			Expect(err).ToNot(HaveOccurred())

			fs.GetFileTestStat("/etc/sysconfig/network-scripts/ifcfg-eth0")
			fs.GetFileTestStat("/etc/resolv.conf")

			<-errCh // wait for all arpings

			Expect(len(cmdRunner.RunCommands)).To(Equal(1))
			Expect(cmdRunner.RunCommands[0]).To(Equal([]string{"service", "network", "restart"}))
		})

		It("starts broadcasting the MAC addresses", func() {
			err := netManager.SetupManualNetworking(networks, errCh)
			Expect(err).ToNot(HaveOccurred())

			fs.GetFileTestStat("/etc/sysconfig/network-scripts/ifcfg-eth0")
			fs.GetFileTestStat("/etc/resolv.conf")

			<-errCh // wait for all arpings

			Expect(addressBroadcaster.BroadcastMACAddressesAddresses).To(Equal([]boship.InterfaceAddress{
				boship.NewSimpleInterfaceAddress("eth0", "192.168.195.6"),
			}))
		})

		Context("when there are multiple networks", func() {
			BeforeEach(func() {
				fs.WriteFileString("/sys/class/net/eth1/address", "22:00:0a:1f:ac:2b\n")
				fs.SetGlob("/sys/class/net/*", []string{"/sys/class/net/eth0", "/sys/class/net/eth1"})
			})
			Context("when one network's gateway is the default gateway", func() {

				multipleNetworks := boshsettings.Networks{
					"bosh": boshsettings.Network{
						Default: []string{"dns", "gateway"},
						IP:      "192.168.195.6",
						Netmask: "255.255.255.0",
						Gateway: "192.168.195.1",
						Mac:     "22:00:0a:1f:ac:2a",
						DNS:     []string{"10.80.130.2", "10.80.130.1"},
					},
					"bosh2": boshsettings.Network{
						IP:      "192.168.196.6",
						Netmask: "255.255.255.0",
						Mac:     "22:00:0a:1f:ac:2b",
					}}

				It("sets up centos expected ifconfig for eth0", func() {
					err := netManager.SetupManualNetworking(multipleNetworks, nil)
					Expect(err).ToNot(HaveOccurred())

					networkConfig := fs.GetFileTestStat("/etc/sysconfig/network-scripts/ifcfg-eth0")
					Expect(networkConfig).ToNot(BeNil())

					expectedIfcfg := `DEVICE=eth0
BOOTPROTO=static
IPADDR=192.168.195.6
NETMASK=255.255.255.0
BROADCAST=192.168.195.255
GATEWAY=192.168.195.1
ONBOOT=yes`
					Expect(networkConfig.StringContents()).To(Equal(expectedIfcfg))
				})

				It("sets up centos expected ifconfig for eth1", func() {
					err := netManager.SetupManualNetworking(multipleNetworks, nil)
					Expect(err).ToNot(HaveOccurred())

					networkConfig := fs.GetFileTestStat("/etc/sysconfig/network-scripts/ifcfg-eth1")
					Expect(networkConfig).ToNot(BeNil())

					expectedIfcfg := `DEVICE=eth1
BOOTPROTO=static
IPADDR=192.168.196.6
NETMASK=255.255.255.0
BROADCAST=192.168.196.255

ONBOOT=yes`
					Expect(networkConfig.StringContents()).To(Equal(expectedIfcfg))
				})

			})
			Context("when there are multiple networks but no default gateway", func() {
				multipleNetworks := boshsettings.Networks{
					"bosh": boshsettings.Network{
						Default: []string{"dns"},
						IP:      "192.168.195.6",
						Netmask: "255.255.255.0",
						Gateway: "192.168.195.1",
						Mac:     "22:00:0a:1f:ac:2a",
						DNS:     []string{"10.80.130.2", "10.80.130.1"},
					},
					"bosh2": boshsettings.Network{
						IP:      "192.168.196.6",
						Netmask: "255.255.255.0",
						Mac:     "22:00:0a:1f:ac:2b",
					}}

				It("sets up centos expected ifconfig for eth0", func() {
					err := netManager.SetupManualNetworking(multipleNetworks, nil)
					Expect(err).To(HaveOccurred())
					Expect(err.Error()).To(ContainSubstring("Finding network for default gateway"))
				})

			})
		})
	})
})
