// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-agent/platform/windows/disk"
)

type FakeWindowsDiskFormatter struct {
	FormatStub        func(string, string) error
	formatMutex       sync.RWMutex
	formatArgsForCall []struct {
		arg1 string
		arg2 string
	}
	formatReturns struct {
		result1 error
	}
	formatReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWindowsDiskFormatter) Format(arg1 string, arg2 string) error {
	fake.formatMutex.Lock()
	ret, specificReturn := fake.formatReturnsOnCall[len(fake.formatArgsForCall)]
	fake.formatArgsForCall = append(fake.formatArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.FormatStub
	fakeReturns := fake.formatReturns
	fake.recordInvocation("Format", []interface{}{arg1, arg2})
	fake.formatMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeWindowsDiskFormatter) FormatCallCount() int {
	fake.formatMutex.RLock()
	defer fake.formatMutex.RUnlock()
	return len(fake.formatArgsForCall)
}

func (fake *FakeWindowsDiskFormatter) FormatCalls(stub func(string, string) error) {
	fake.formatMutex.Lock()
	defer fake.formatMutex.Unlock()
	fake.FormatStub = stub
}

func (fake *FakeWindowsDiskFormatter) FormatArgsForCall(i int) (string, string) {
	fake.formatMutex.RLock()
	defer fake.formatMutex.RUnlock()
	argsForCall := fake.formatArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeWindowsDiskFormatter) FormatReturns(result1 error) {
	fake.formatMutex.Lock()
	defer fake.formatMutex.Unlock()
	fake.FormatStub = nil
	fake.formatReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeWindowsDiskFormatter) FormatReturnsOnCall(i int, result1 error) {
	fake.formatMutex.Lock()
	defer fake.formatMutex.Unlock()
	fake.FormatStub = nil
	if fake.formatReturnsOnCall == nil {
		fake.formatReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.formatReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeWindowsDiskFormatter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.formatMutex.RLock()
	defer fake.formatMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWindowsDiskFormatter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ disk.WindowsDiskFormatter = new(FakeWindowsDiskFormatter)
