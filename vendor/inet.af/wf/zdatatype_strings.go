// Code generated by "stringer -output=zdatatype_strings.go -type=dataType -trimprefix=dataType"; DO NOT EDIT.

package wf

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[dataTypeEmpty-0]
	_ = x[dataTypeUint8-1]
	_ = x[dataTypeUint16-2]
	_ = x[dataTypeUint32-3]
	_ = x[dataTypeUint64-4]
	_ = x[dataTypeByteArray16-11]
	_ = x[dataTypeByteBlob-12]
	_ = x[dataTypeSID-13]
	_ = x[dataTypeSecurityDescriptor-14]
	_ = x[dataTypeTokenInformation-15]
	_ = x[dataTypeTokenAccessInformation-16]
	_ = x[dataTypeArray6-18]
	_ = x[dataTypeBitmapIndex-19]
	_ = x[dataTypeV4AddrMask-256]
	_ = x[dataTypeV6AddrMask-257]
	_ = x[dataTypeRange-258]
}

const (
	_dataType_name_0 = "EmptyUint8Uint16Uint32Uint64"
	_dataType_name_1 = "ByteArray16ByteBlobSIDSecurityDescriptorTokenInformationTokenAccessInformation"
	_dataType_name_2 = "Array6BitmapIndex"
	_dataType_name_3 = "V4AddrMaskV6AddrMaskRange"
)

var (
	_dataType_index_0 = [...]uint8{0, 5, 10, 16, 22, 28}
	_dataType_index_1 = [...]uint8{0, 11, 19, 22, 40, 56, 78}
	_dataType_index_2 = [...]uint8{0, 6, 17}
	_dataType_index_3 = [...]uint8{0, 10, 20, 25}
)

func (i dataType) String() string {
	switch {
	case i <= 4:
		return _dataType_name_0[_dataType_index_0[i]:_dataType_index_0[i+1]]
	case 11 <= i && i <= 16:
		i -= 11
		return _dataType_name_1[_dataType_index_1[i]:_dataType_index_1[i+1]]
	case 18 <= i && i <= 19:
		i -= 18
		return _dataType_name_2[_dataType_index_2[i]:_dataType_index_2[i+1]]
	case 256 <= i && i <= 258:
		i -= 256
		return _dataType_name_3[_dataType_index_3[i]:_dataType_index_3[i+1]]
	default:
		return "dataType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
