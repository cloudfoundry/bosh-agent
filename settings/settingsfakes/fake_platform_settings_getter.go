// Code generated by counterfeiter. DO NOT EDIT.
package settingsfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-agent/v2/settings"
)

type FakePlatformSettingsGetter struct {
	GetAgentSettingsPathStub        func(bool) string
	getAgentSettingsPathMutex       sync.RWMutex
	getAgentSettingsPathArgsForCall []struct {
		arg1 bool
	}
	getAgentSettingsPathReturns struct {
		result1 string
	}
	getAgentSettingsPathReturnsOnCall map[int]struct {
		result1 string
	}
	GetDefaultNetworkStub        func() (settings.Network, error)
	getDefaultNetworkMutex       sync.RWMutex
	getDefaultNetworkArgsForCall []struct {
	}
	getDefaultNetworkReturns struct {
		result1 settings.Network
		result2 error
	}
	getDefaultNetworkReturnsOnCall map[int]struct {
		result1 settings.Network
		result2 error
	}
	GetPersistentDiskSettingsPathStub        func(bool) string
	getPersistentDiskSettingsPathMutex       sync.RWMutex
	getPersistentDiskSettingsPathArgsForCall []struct {
		arg1 bool
	}
	getPersistentDiskSettingsPathReturns struct {
		result1 string
	}
	getPersistentDiskSettingsPathReturnsOnCall map[int]struct {
		result1 string
	}
	GetUpdateSettingsPathStub        func(bool) string
	getUpdateSettingsPathMutex       sync.RWMutex
	getUpdateSettingsPathArgsForCall []struct {
		arg1 bool
	}
	getUpdateSettingsPathReturns struct {
		result1 string
	}
	getUpdateSettingsPathReturnsOnCall map[int]struct {
		result1 string
	}
	SetupBoshSettingsDiskStub        func() error
	setupBoshSettingsDiskMutex       sync.RWMutex
	setupBoshSettingsDiskArgsForCall []struct {
	}
	setupBoshSettingsDiskReturns struct {
		result1 error
	}
	setupBoshSettingsDiskReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePlatformSettingsGetter) GetAgentSettingsPath(arg1 bool) string {
	fake.getAgentSettingsPathMutex.Lock()
	ret, specificReturn := fake.getAgentSettingsPathReturnsOnCall[len(fake.getAgentSettingsPathArgsForCall)]
	fake.getAgentSettingsPathArgsForCall = append(fake.getAgentSettingsPathArgsForCall, struct {
		arg1 bool
	}{arg1})
	stub := fake.GetAgentSettingsPathStub
	fakeReturns := fake.getAgentSettingsPathReturns
	fake.recordInvocation("GetAgentSettingsPath", []interface{}{arg1})
	fake.getAgentSettingsPathMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePlatformSettingsGetter) GetAgentSettingsPathCallCount() int {
	fake.getAgentSettingsPathMutex.RLock()
	defer fake.getAgentSettingsPathMutex.RUnlock()
	return len(fake.getAgentSettingsPathArgsForCall)
}

func (fake *FakePlatformSettingsGetter) GetAgentSettingsPathCalls(stub func(bool) string) {
	fake.getAgentSettingsPathMutex.Lock()
	defer fake.getAgentSettingsPathMutex.Unlock()
	fake.GetAgentSettingsPathStub = stub
}

func (fake *FakePlatformSettingsGetter) GetAgentSettingsPathArgsForCall(i int) bool {
	fake.getAgentSettingsPathMutex.RLock()
	defer fake.getAgentSettingsPathMutex.RUnlock()
	argsForCall := fake.getAgentSettingsPathArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePlatformSettingsGetter) GetAgentSettingsPathReturns(result1 string) {
	fake.getAgentSettingsPathMutex.Lock()
	defer fake.getAgentSettingsPathMutex.Unlock()
	fake.GetAgentSettingsPathStub = nil
	fake.getAgentSettingsPathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakePlatformSettingsGetter) GetAgentSettingsPathReturnsOnCall(i int, result1 string) {
	fake.getAgentSettingsPathMutex.Lock()
	defer fake.getAgentSettingsPathMutex.Unlock()
	fake.GetAgentSettingsPathStub = nil
	if fake.getAgentSettingsPathReturnsOnCall == nil {
		fake.getAgentSettingsPathReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getAgentSettingsPathReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakePlatformSettingsGetter) GetDefaultNetwork() (settings.Network, error) {
	fake.getDefaultNetworkMutex.Lock()
	ret, specificReturn := fake.getDefaultNetworkReturnsOnCall[len(fake.getDefaultNetworkArgsForCall)]
	fake.getDefaultNetworkArgsForCall = append(fake.getDefaultNetworkArgsForCall, struct {
	}{})
	stub := fake.GetDefaultNetworkStub
	fakeReturns := fake.getDefaultNetworkReturns
	fake.recordInvocation("GetDefaultNetwork", []interface{}{})
	fake.getDefaultNetworkMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePlatformSettingsGetter) GetDefaultNetworkCallCount() int {
	fake.getDefaultNetworkMutex.RLock()
	defer fake.getDefaultNetworkMutex.RUnlock()
	return len(fake.getDefaultNetworkArgsForCall)
}

func (fake *FakePlatformSettingsGetter) GetDefaultNetworkCalls(stub func() (settings.Network, error)) {
	fake.getDefaultNetworkMutex.Lock()
	defer fake.getDefaultNetworkMutex.Unlock()
	fake.GetDefaultNetworkStub = stub
}

func (fake *FakePlatformSettingsGetter) GetDefaultNetworkReturns(result1 settings.Network, result2 error) {
	fake.getDefaultNetworkMutex.Lock()
	defer fake.getDefaultNetworkMutex.Unlock()
	fake.GetDefaultNetworkStub = nil
	fake.getDefaultNetworkReturns = struct {
		result1 settings.Network
		result2 error
	}{result1, result2}
}

func (fake *FakePlatformSettingsGetter) GetDefaultNetworkReturnsOnCall(i int, result1 settings.Network, result2 error) {
	fake.getDefaultNetworkMutex.Lock()
	defer fake.getDefaultNetworkMutex.Unlock()
	fake.GetDefaultNetworkStub = nil
	if fake.getDefaultNetworkReturnsOnCall == nil {
		fake.getDefaultNetworkReturnsOnCall = make(map[int]struct {
			result1 settings.Network
			result2 error
		})
	}
	fake.getDefaultNetworkReturnsOnCall[i] = struct {
		result1 settings.Network
		result2 error
	}{result1, result2}
}

func (fake *FakePlatformSettingsGetter) GetPersistentDiskSettingsPath(arg1 bool) string {
	fake.getPersistentDiskSettingsPathMutex.Lock()
	ret, specificReturn := fake.getPersistentDiskSettingsPathReturnsOnCall[len(fake.getPersistentDiskSettingsPathArgsForCall)]
	fake.getPersistentDiskSettingsPathArgsForCall = append(fake.getPersistentDiskSettingsPathArgsForCall, struct {
		arg1 bool
	}{arg1})
	stub := fake.GetPersistentDiskSettingsPathStub
	fakeReturns := fake.getPersistentDiskSettingsPathReturns
	fake.recordInvocation("GetPersistentDiskSettingsPath", []interface{}{arg1})
	fake.getPersistentDiskSettingsPathMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePlatformSettingsGetter) GetPersistentDiskSettingsPathCallCount() int {
	fake.getPersistentDiskSettingsPathMutex.RLock()
	defer fake.getPersistentDiskSettingsPathMutex.RUnlock()
	return len(fake.getPersistentDiskSettingsPathArgsForCall)
}

func (fake *FakePlatformSettingsGetter) GetPersistentDiskSettingsPathCalls(stub func(bool) string) {
	fake.getPersistentDiskSettingsPathMutex.Lock()
	defer fake.getPersistentDiskSettingsPathMutex.Unlock()
	fake.GetPersistentDiskSettingsPathStub = stub
}

func (fake *FakePlatformSettingsGetter) GetPersistentDiskSettingsPathArgsForCall(i int) bool {
	fake.getPersistentDiskSettingsPathMutex.RLock()
	defer fake.getPersistentDiskSettingsPathMutex.RUnlock()
	argsForCall := fake.getPersistentDiskSettingsPathArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePlatformSettingsGetter) GetPersistentDiskSettingsPathReturns(result1 string) {
	fake.getPersistentDiskSettingsPathMutex.Lock()
	defer fake.getPersistentDiskSettingsPathMutex.Unlock()
	fake.GetPersistentDiskSettingsPathStub = nil
	fake.getPersistentDiskSettingsPathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakePlatformSettingsGetter) GetPersistentDiskSettingsPathReturnsOnCall(i int, result1 string) {
	fake.getPersistentDiskSettingsPathMutex.Lock()
	defer fake.getPersistentDiskSettingsPathMutex.Unlock()
	fake.GetPersistentDiskSettingsPathStub = nil
	if fake.getPersistentDiskSettingsPathReturnsOnCall == nil {
		fake.getPersistentDiskSettingsPathReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getPersistentDiskSettingsPathReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakePlatformSettingsGetter) GetUpdateSettingsPath(arg1 bool) string {
	fake.getUpdateSettingsPathMutex.Lock()
	ret, specificReturn := fake.getUpdateSettingsPathReturnsOnCall[len(fake.getUpdateSettingsPathArgsForCall)]
	fake.getUpdateSettingsPathArgsForCall = append(fake.getUpdateSettingsPathArgsForCall, struct {
		arg1 bool
	}{arg1})
	stub := fake.GetUpdateSettingsPathStub
	fakeReturns := fake.getUpdateSettingsPathReturns
	fake.recordInvocation("GetUpdateSettingsPath", []interface{}{arg1})
	fake.getUpdateSettingsPathMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePlatformSettingsGetter) GetUpdateSettingsPathCallCount() int {
	fake.getUpdateSettingsPathMutex.RLock()
	defer fake.getUpdateSettingsPathMutex.RUnlock()
	return len(fake.getUpdateSettingsPathArgsForCall)
}

func (fake *FakePlatformSettingsGetter) GetUpdateSettingsPathCalls(stub func(bool) string) {
	fake.getUpdateSettingsPathMutex.Lock()
	defer fake.getUpdateSettingsPathMutex.Unlock()
	fake.GetUpdateSettingsPathStub = stub
}

func (fake *FakePlatformSettingsGetter) GetUpdateSettingsPathArgsForCall(i int) bool {
	fake.getUpdateSettingsPathMutex.RLock()
	defer fake.getUpdateSettingsPathMutex.RUnlock()
	argsForCall := fake.getUpdateSettingsPathArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePlatformSettingsGetter) GetUpdateSettingsPathReturns(result1 string) {
	fake.getUpdateSettingsPathMutex.Lock()
	defer fake.getUpdateSettingsPathMutex.Unlock()
	fake.GetUpdateSettingsPathStub = nil
	fake.getUpdateSettingsPathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakePlatformSettingsGetter) GetUpdateSettingsPathReturnsOnCall(i int, result1 string) {
	fake.getUpdateSettingsPathMutex.Lock()
	defer fake.getUpdateSettingsPathMutex.Unlock()
	fake.GetUpdateSettingsPathStub = nil
	if fake.getUpdateSettingsPathReturnsOnCall == nil {
		fake.getUpdateSettingsPathReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getUpdateSettingsPathReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakePlatformSettingsGetter) SetupBoshSettingsDisk() error {
	fake.setupBoshSettingsDiskMutex.Lock()
	ret, specificReturn := fake.setupBoshSettingsDiskReturnsOnCall[len(fake.setupBoshSettingsDiskArgsForCall)]
	fake.setupBoshSettingsDiskArgsForCall = append(fake.setupBoshSettingsDiskArgsForCall, struct {
	}{})
	stub := fake.SetupBoshSettingsDiskStub
	fakeReturns := fake.setupBoshSettingsDiskReturns
	fake.recordInvocation("SetupBoshSettingsDisk", []interface{}{})
	fake.setupBoshSettingsDiskMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePlatformSettingsGetter) SetupBoshSettingsDiskCallCount() int {
	fake.setupBoshSettingsDiskMutex.RLock()
	defer fake.setupBoshSettingsDiskMutex.RUnlock()
	return len(fake.setupBoshSettingsDiskArgsForCall)
}

func (fake *FakePlatformSettingsGetter) SetupBoshSettingsDiskCalls(stub func() error) {
	fake.setupBoshSettingsDiskMutex.Lock()
	defer fake.setupBoshSettingsDiskMutex.Unlock()
	fake.SetupBoshSettingsDiskStub = stub
}

func (fake *FakePlatformSettingsGetter) SetupBoshSettingsDiskReturns(result1 error) {
	fake.setupBoshSettingsDiskMutex.Lock()
	defer fake.setupBoshSettingsDiskMutex.Unlock()
	fake.SetupBoshSettingsDiskStub = nil
	fake.setupBoshSettingsDiskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePlatformSettingsGetter) SetupBoshSettingsDiskReturnsOnCall(i int, result1 error) {
	fake.setupBoshSettingsDiskMutex.Lock()
	defer fake.setupBoshSettingsDiskMutex.Unlock()
	fake.SetupBoshSettingsDiskStub = nil
	if fake.setupBoshSettingsDiskReturnsOnCall == nil {
		fake.setupBoshSettingsDiskReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setupBoshSettingsDiskReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePlatformSettingsGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAgentSettingsPathMutex.RLock()
	defer fake.getAgentSettingsPathMutex.RUnlock()
	fake.getDefaultNetworkMutex.RLock()
	defer fake.getDefaultNetworkMutex.RUnlock()
	fake.getPersistentDiskSettingsPathMutex.RLock()
	defer fake.getPersistentDiskSettingsPathMutex.RUnlock()
	fake.getUpdateSettingsPathMutex.RLock()
	defer fake.getUpdateSettingsPathMutex.RUnlock()
	fake.setupBoshSettingsDiskMutex.RLock()
	defer fake.setupBoshSettingsDiskMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePlatformSettingsGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ settings.PlatformSettingsGetter = new(FakePlatformSettingsGetter)
